// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sql_queries

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type StudentFormOfEducation string

const (
	StudentFormOfEducationValue0 StudentFormOfEducation = "Денна"
	StudentFormOfEducationValue1 StudentFormOfEducation = "Вечірня"
	StudentFormOfEducationValue2 StudentFormOfEducation = "Домашня"
)

func (e *StudentFormOfEducation) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentFormOfEducation(s)
	case string:
		*e = StudentFormOfEducation(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentFormOfEducation: %T", src)
	}
	return nil
}

type NullStudentFormOfEducation struct {
	StudentFormOfEducation StudentFormOfEducation
	Valid                  bool // Valid is true if StudentFormOfEducation is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentFormOfEducation) Scan(value interface{}) error {
	if value == nil {
		ns.StudentFormOfEducation, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentFormOfEducation.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentFormOfEducation) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentFormOfEducation), nil
}

type StudentGender string

const (
	StudentGenderM StudentGender = "M"
	StudentGenderF StudentGender = "F"
)

func (e *StudentGender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = StudentGender(s)
	case string:
		*e = StudentGender(s)
	default:
		return fmt.Errorf("unsupported scan type for StudentGender: %T", src)
	}
	return nil
}

type NullStudentGender struct {
	StudentGender StudentGender
	Valid         bool // Valid is true if StudentGender is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStudentGender) Scan(value interface{}) error {
	if value == nil {
		ns.StudentGender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.StudentGender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStudentGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.StudentGender), nil
}

type Lesson struct {
	LessonID  int32
	Topic     string
	StartDate time.Time
	StartTime time.Time
	SubjectID int32
}

type Mark struct {
	MarkID    int32
	Mark      int32
	StudentID int32
	LessonID  int32
}

type Student struct {
	StudentID          int32
	Firstname          string
	Middlename         string
	Lastname           string
	Gender             StudentGender
	Birthday           time.Time
	FormOfEducation    StudentFormOfEducation
	PersonalFileNumber string
	Note               sql.NullString
}

type Subject struct {
	SubjectID     int32
	Title         string
	Descript      sql.NullString
	NumberOfHours int32
}
